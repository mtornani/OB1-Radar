name: Oriundi Radar Pipeline

on:
  workflow_dispatch:
    inputs:
      use_sample_data:
        description: "Esegui in modalit\u00e0 offline (disabilita fonti esterne)"
        type: boolean
        default: true
      queries:
        description: "Query personalizzate (una per riga)"
        required: false
        type: string
      registry_enabled:
        description: "Abilita ingestione registri open data"
        type: boolean
        default: false
      registry_base_url:
        description: "Endpoint registri (obbligatorio se abilitati)"
        required: false
        type: string
      registry_max_results:
        description: "Limite risultati registry"
        required: false
        default: "250"
      fuzzy_threshold:
        description: "Soglia fuzzy matching (0-100)"
        required: false
        default: "88"

permissions:
  contents: read

jobs:
  run-pipeline:
    name: Run Oriundi pipeline
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install pipeline dependencies
        working-directory: oriundi-radar
        run: |
          python -m pip install --upgrade pip
          pip install ".[full]"

      - name: Render execution config
        env:
          SAMPLE_MODE: ${{ inputs.use_sample_data }}
          INPUT_QUERIES: ${{ inputs.queries }}
          REGISTRY_ENABLED: ${{ inputs.registry_enabled }}
          REGISTRY_URL: ${{ inputs.registry_base_url }}
          REGISTRY_MAX_RESULTS: ${{ inputs.registry_max_results }}
          FUZZY_THRESHOLD: ${{ inputs.fuzzy_threshold }}
          ANYCRAWL_KEY: ${{ secrets.ORIUNDI_ANYCRAWL_KEY }}
          ANYCRAWL_URL: ${{ secrets.ORIUNDI_ANYCRAWL_URL }}
          ANYCRAWL_RATE_LIMIT: ${{ secrets.ORIUNDI_ANYCRAWL_RATE_LIMIT }}
          GENEALOGIC_KEY: ${{ secrets.ORIUNDI_GENEALOGIC_KEY }}
          GENEALOGIC_URL: ${{ secrets.ORIUNDI_GENEALOGIC_URL }}
        run: |
          python - <<'PY'
          import json
          import os
          from copy import deepcopy
          from pathlib import Path

          root = Path("oriundi-radar")
          config_path = root / "config" / "settings.gha.json"
          output_dir = root / "output"
          output_dir.mkdir(parents=True, exist_ok=True)

          def _bool(value: str | None, *, default: bool = False) -> bool:
              if value is None:
                  return default
              return value.lower() in {"1", "true", "yes", "on"}

          sample_mode = _bool(os.environ.get("SAMPLE_MODE"), default=True)
          queries_raw = (os.environ.get("INPUT_QUERIES") or "").strip()
          queries = [line.strip() for line in queries_raw.splitlines() if line.strip()]
          if sample_mode and not queries:
              queries = []

          config = {
              "anycrawl": {
                  "base_url": os.environ.get("ANYCRAWL_URL") or "https://api.anycrawl.dev/v1",
                  "key": os.environ.get("ANYCRAWL_KEY", ""),
                  "rate_limit_per_minute": int(os.environ.get("ANYCRAWL_RATE_LIMIT") or 60),
              },
              "genealogic": {
                  "base_url": os.environ.get("GENEALOGIC_URL") or "https://api.familysearch.org",
                  "key": os.environ.get("GENEALOGIC_KEY", ""),
                  "rate_limit_per_minute": 60,
              },
              "registry": {
                  "enabled": False,
                  "base_url": None,
                  "max_results": int(os.environ.get("REGISTRY_MAX_RESULTS") or 250),
              },
              "storage": {
                  "duckdb_path": "data/oriundi.duckdb",
                  "graph_store_path": "output/oriundi_graph.ttl",
                  "export_dir": "output",
              },
              "ml": {
                  "enable_language_models": False,
                  "spacy_model": "",
                  "fuzzy_threshold": int(os.environ.get("FUZZY_THRESHOLD") or 88),
              },
              "queries": queries,
          }

          if not sample_mode:
              registry_enabled = _bool(os.environ.get("REGISTRY_ENABLED"))
              registry_url = (os.environ.get("REGISTRY_URL") or "").strip()
              if registry_url:
                  config["registry"]["base_url"] = registry_url
              config["registry"]["enabled"] = registry_enabled and bool(registry_url)
              if not queries:
                  config["queries"] = [
                      "football dual citizenship prospect",
                      "youth player italian ancestry",
                      "san marino eligible footballer",
                  ]

          config_path.parent.mkdir(parents=True, exist_ok=True)
          config_path.write_text(json.dumps(config, indent=2), encoding="utf-8")

          redacted = deepcopy(config)
          if redacted["anycrawl"].get("key"):
              redacted["anycrawl"]["key"] = "***"
          if redacted["genealogic"].get("key"):
              redacted["genealogic"]["key"] = "***"

          redacted_path = output_dir / "run_settings.redacted.json"
          redacted_path.write_text(json.dumps(redacted, indent=2), encoding="utf-8")

          print("Config salvata in", config_path)
          print(json.dumps(redacted, indent=2))
          PY

      - name: Run Oriundi pipeline
        working-directory: oriundi-radar
        run: oriundi-pipeline run --config config/settings.gha.json

      - name: Show exported files
        working-directory: oriundi-radar
        run: |
          python - <<'PY'
          from pathlib import Path
          base = Path("output")
          if not base.exists():
              print("Nessun output generato")
          else:
              for path in sorted(base.glob("**/*")):
                  if path.is_file():
                      print(path)
          PY

      - name: Upload pipeline artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oriundi-radar-output
          path: |
            oriundi-radar/output/**
            oriundi-radar/output
            oriundi-radar/data/oriundi.duckdb
          if-no-files-found: ignore
